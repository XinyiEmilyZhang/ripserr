% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ripser_func.R
\name{ripser}
\alias{ripser}
\title{Calculate Persistent Homology of a Point Cloud}
\usage{
ripser(
  mat,
  dim = 1,
  threshold = -1,
  format = "cloud",
  retval = "mat",
  use_coef = FALSE
)
}
\arguments{
\item{mat}{numeric matrix containing point cloud or distance matrix}

\item{dim}{maximum dimension of features to calculate}

\item{threshold}{maximum diameter for computation of Vietoris-Rips complexes}

\item{format}{format of `mat`, either "cloud" for point cloud or "distmat" for distance matrix}

\item{retval}{defaults to "mat" (matrix); user can also choose "df" to
instead return a data frame}

\item{use_coef}{logical determining whether support for coefficients in a
prime field will be enabled}
}
\value{
3-column matrix or data frame, with each row representing a feature
}
\description{
Calculates the persistent homology of a point cloud, as represented by
a Vietoris-Rips complex. This function is an R wrapper for Ulrich Bauer's
Ripser C++ library for calculating persistent homology. For more
information on the C++ library, see <https://github.com/Ripser/ripser>.
}
\details{
The `mat` parameter should be a numeric matrix with each row corresponding
to a single point, and each column corresponding to a single dimension. Thus,
if `mat` has 50 rows and 3 columns, it represents a point cloud with 50 points
in 3 dimensions. The `dim` parameter should be a positive integer.
Alternatively, the `mat` parameter could be a distance matrix (upper
triangular half is ignored); note: `format` should be specified as "ldm".
}
\examples{

# create a 2-d point cloud of a circle (100 points)
num_pts <- 100
rand_angle <- runif(num_pts, 0, 2 * pi)
pt_cloud <- cbind(cos(rand_angle), sin(rand_angle))

# calculate persistent homology (num_pts by 3 numeric matrix)
ripser(pt_cloud)
}
